const searchbtn = document.getElementById('btn');
const cityInput = document.getElementById('city-input');

 // var city = document.getElementById('city-input').value;
  const apiKey = '64afc18e4eec9c8916519c03409b7bf9';


  /*var url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`; //current weather

  fetch(url)
      .then(response => response.json())
      .then(data => {
          if (data.cod === 200) {

            console.log(data); // Log the entire response to check its structure
                console.log(data.main.humidity); // Check if humidity data is present
                console.log(data.wind.speed); // Check if wind speed data is present

                var lat = data.coord.lat;
                var lon = data.coord.lon; 

              // Update the DOM with the fetched data
              document.getElementById('location').textContent = data.name;
              document.getElementById('tempe').textContent = `${data.main.temp} °C`;
              document.getElementById('humidityy').textContent = `${data.main.humidity}%`;
              document.getElementById('wind-speed').textContent = `${data.wind.speed} m/s`;


          } else {
              alert('City not found');
          }
      })
      .catch(error => console.log('Error fetching the weather data:', error));
});*/

const createWeatherCard = (cityName, weatherItem, index) => {
    if(index === 0) { // for main weather card
        document.getElementById('location').textContent = weatherItem.name;
              document.getElementById('tempe').textContent = `${weatherItem.main.temp} °C`;
              document.getElementById('humidityy').textContent = `${weatherItem.main.humidity}%`;
              document.getElementById('wind-speed').textContent = `${weatherItem.wind.speed} m/s`;

    } else { //for other 5 weather cards
        return `<li class="cards">
                <h3>(${weatherItem.dt_txt.split(" ")[0]})</h3>
                <img src="https://openweathermap.org/img/wn/${weatherItem.weather[0].icon}@2x.png" alt="weather icon" width="70" height="auto">
                <h4>Temp: ${(weatherItem.main.temp - 273.15).toFixed(2)}°C</h4>
                <h4>Wind: ${weatherItem.wind.speed} km/h</h4>
                <h4>Humidity: ${weatherItem.main.humidity}%</h4>
            </li>`;
    }

    
}




const getDetails = (cityName, lat, lon) => {
    const api = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}`;

    fetch(api).then(res => res.json()).then(data => {
        
        //filtering the forecast to get only one forecast per day
        const uniqueForecastDays = [];
        const fiveDaysForecast = data.list.filter(forecast => {

            const forecastDate = new Date(forecast.dt_txt).getDate();

            if(!uniqueForecastDays.includes(forecastDate)) {
                return uniqueForecastDays.push(forecastDate);
            }
        });

        //clearing previous weather cards
        cityInput.value = "";
        //currentWeatherDiv.innerHTML = "";
        //weatherCardsDiv.innerHTML = "";
        

        //creating weather cards and adding them to the DOM

        fiveDaysForecast.forEach((weatherItem, index) => {
            if(index === 0) {
                currentWeatherDiv.insertAdjacentHTML("beforeend", createWeatherCard(cityName, weatherItem, index));
            } else {
                weatherCardsDiv.insertAdjacentHTML("beforeend", createWeatherCard(cityName, weatherItem, index));
            }
            
            
        });


    }).catch(() => {
        alert("An error occured while fetching the weather forecast!");
    }) 
}


const getCoordinates = () => {

    const city = cityInput.value.trim();
    if(!city) return;

    const geo_api = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`; 

    fetch(geo_api).then(res => res.json()).then(data => {
        if(!data.length) return alert(`No coordinates found for ${city}`);
        const { name, lat, lon } = data[0];
        getDetails(name, lat, lon);
    }).catch(() => {
        alert("An error occured while fetching the coordinates!");
    });
}

searchbtn.addEventListener("click", getCoordinates);
cityInput.addEventListener("keyup", e => e.key === "Enter" && getCoordinates());



